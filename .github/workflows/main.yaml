name: ecs-web-app-workflow
on: push
env:
    AWS_REGION: us-east-1
    ECR_REPOSITORY: webappecr
    ECS_SERVICE: Webapp-ecs-svc-p
    ECS_CLUSTER: webapp-ecs
    ECS_TASK_DEFINITION: aws-files/taskdeffile.json
    CONTAINER_NAME: Webapp-container
jobs:
    Testing:
        runs-on: ubuntu-latest
        steps:
            # Checkout the repo
            - name: Code Checkout
              uses: actions/checkout@v4
            
            # maven and Checkstyletest
            - name: maven test
              run: mvn test
            - name: Checkstyle
              run: mvn checkstyle:checkstyle
            - name: Set up java 11
              uses: actions/setup-java@v4
              with:
                distribution: 'temurin' # See 'Supported distributions' for available options
                java-version: '11'
            # Setup sonar-scanner
            - name: Setup SonarQube
              uses: warchant/setup-sonar-scanner@v7
            # Run sonar-scanner
            - name: SonarQube Scan
              run: sonar-scanner
                -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }}
                -Dsonar.login=${{ secrets.SONAR_TOKEN }}
                -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
                -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
                -Dsonar.sources=src/
                -Dsonar.junit.reportsPath=target/surefire-reports/ 
                -Dsonar.jacoco.reportsPath=target/jacoco.exec 
                -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml
                -Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest/
                # Check the Quality Gate status.
            -  name: SonarQube Quality Gate check
               id: sonarqube-quality-gate-check
               uses: sonarsource/sonarqube-quality-gate-action@master
               with:
                pollingTimeoutSec: 600
               env:
                SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
                SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }} #OPTIONAL          
             # Add a failure condition
            - name: Fail if Quality Gate Fails
              run: |
                if [[ "${{ steps.sonarqube-quality-gate-check.outputs.quality-gate-status }}" != "PASSED" ]]; then
                echo "SonarQube Quality Gate failed. Stopping the workflow."
                exit 1
                fi  
    BUILD_AND_PUBLISH:
        needs: Testing
        runs-on: ubuntu-latest
        steps:
          - name: code checkout
            uses: actions/checkout@v4
            
          - name: Update appliocation property file
            run: |
             sed -i "s/^jdbc.username.*$/jdbc.username\=${{ secrets.RDS_USER }}/" src/main/resources/application.properties
             sed -i "s/^jdbc.password.*$/jdbc.password\=${{ secrets.RDS_PASS }}/" src/main/resources/application.properties
             sed -i "s/db01/${{ secrets.RDS_ENDPOINT }}/" src/main/resources/application.properties  
          - name: Build and upload image to ECR
            uses: appleboy/docker-ecr-action@master
            with:
               access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
               secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
               registry: ${{ secrets.REGISTRY }}
               
               repo: webappecr
               region: ${{env.AWS_REGION}}
               tags: latest,${{github.run_number}}
               daemon_off: false
               dockerfile: ./Dockerfile
               context: ./           
    DEPLOY:
        runs-on: ubuntu-latest
        needs: BUILD_AND_PUBLISH
        steps:
          - name: Checkout the code
            uses: actions/checkout@v4
          
          - name: Configure AWS Credentials
            uses: aws-actions/configure-aws-credentials@v4
            with:
                aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                aws-region: ${{env.AWS_REGION}}
          - name: Fill in the new image ID in the Amazon ECS task definition
            id: task-def
            uses: aws-actions/amazon-ecs-render-task-definition@v1
            with:
                  task-definition: ${{env.ECS_TASK_DEFINITION}}
                  container-name:  ${{env.CONTAINER_NAME}}
                  image: ${{secrets.REGISTRY}}/${{env.ECR_REPOSITORY}}:${{github.run_number}}
          
          - name: Deploy Amazon ECS task definition
            uses: aws-actions/amazon-ecs-deploy-task-definition@v2
            with:
              task-definition: ${{ steps.task-def.outputs.task-definition }}
              service: ${{env.ECS_SERVICE}}
              cluster: ${{env.ECS_CLUSTER}}
              wait-for-service-stability: true      
            
            
              
              